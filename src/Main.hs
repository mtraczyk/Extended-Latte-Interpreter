-- File generated by the BNF Converter (bnfc 2.9.4).

-- | Program to test parser.

module Main where

import Prelude
  ( ($), (.)
  , Either(..)
  , Int, (>)
  , String, (++), concat, unlines
  , Show, show
  , IO, (>>), (>>=), mapM_, putStrLn
  , FilePath
  , getContents, readFile
  )
import System.Environment ( getArgs )
import System.Exit        ( exitFailure, exitSuccess )
import System.IO          ( hPrint, stderr )
import Control.Monad      ( when )

import Syntax.AbsLatte   ( Program )
import Parser.LexLatte   ( Token, mkPosToken )
import Parser.ParLatte   ( pProgram, myLexer )
import Exception.SkelLatte  ()
import ProgramEvaluator.ProgramEvaluator ( evalProgram )

type Err        = Either String
type ParseFun a = [Token] -> Err a
type Verbosity  = Int

putStrV :: Verbosity -> String -> IO ()
putStrV v s = when (v > 1) $ putStrLn s

runFile :: Show a => Verbosity -> ParseFun a -> FilePath -> IO ()
runFile v p f = putStrLn f >> readFile f >>= run v p

run :: Show a => Verbosity -> ParseFun a -> String -> IO ()
run v p s =
  case p ts of
    Left err -> do
      putStrLn "\nParse              Failed...\n"
      putStrV v "Tokens:"
      mapM_ (putStrV v . showPosToken . mkPosToken) ts
      putStrLn err
      exitFailure
    Right tree -> do
      putStrLn "\nParse Successful!"
--      typeChecker (pProgram ts)
      interpreter (pProgram ts)
  where
  ts = myLexer s
  showPosToken ((l,c),t) = concat [ show l, ":", show c, "\t", show t ]

usage :: IO ()
usage = do
  putStrLn $ unlines
    [ "usage: Call with one of the following argument combinations:"
    , "  --help          Display this help message."
    , "  (no arguments)  Parse stdin verbosely."
    , "  (files)         Parse content of files verbosely."
    , "  -s (files)      Silent mode. Parse content of files silently."
    ]

--typeChecker :: Either String Program -> IO ()
--typeChecker (Left errMsg) = do
--  hPrint stderr errMsg
--  exitFailure
--
--typeChecker (Right tree) = putStrLn "\nType Check"

interpreter :: Either String Program -> IO ()
interpreter (Left errMsg) = do
  hPrint stderr errMsg
  exitFailure

interpreter (Right tree) = do
  res <- evalProgram tree
  case res of
    Left err -> do
      hPrint stderr err
      exitFailure
    Right ret -> do
      putStrLn $ show ret
      exitSuccess

main :: IO ()
main = do
  args <- getArgs
  case args of
    ["--help"] -> usage
    []         -> getContents >>= run 2 pProgram
    "-s":fs    -> mapM_ (runFile 0 pProgram) fs
    fs         -> mapM_ (runFile 2 pProgram) fs

